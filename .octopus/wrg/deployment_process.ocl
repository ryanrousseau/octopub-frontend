step "deploy-frontend" {
    name = "Deploy frontend"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "*.yaml"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "github-packages"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Package.PackageId = "Octopub.Frontend"
            Octopus.Action.Script.ScriptSource = "Package"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }

        packages {
            acquisition_location = "Server"
            feed = "github-packages"
            package_id = "Octopub.Frontend"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-deployment" {
    name = "Create deployment"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "deployment.yml"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }

        git_dependencies {
            default_branch = "main"
            file_path_filters = ["deployment.yml"]
            git_credential_id = "GitCredentials-122"
            git_credential_type = "Library"
            repository_uri = "https://github.com/ryanrousseau/octopub-frontend.git"
        }
    }
}

step "create-service" {
    name = "Create service"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "service.yml"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }

        git_dependencies {
            default_branch = "main"
            file_path_filters = ["service.yml"]
            git_credential_id = "GitCredentials-122"
            git_credential_type = "Library"
            repository_uri = "https://github.com/ryanrousseau/octopub-frontend.git"
        }
    }
}

step "deploy-ingress" {
    name = "Create ingress"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "ingress.yml"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }

        git_dependencies {
            default_branch = "main"
            file_path_filters = ["ingress.yml"]
            git_credential_id = "GitCredentials-122"
            git_credential_type = "Library"
            repository_uri = "https://github.com/ryanrousseau/octopub-frontend.git"
        }
    }
}

step "print-url" {
    name = "Print URL"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $url = $OctopusParameters["Octopub.Tenant.Url"]
                
                Write-Highlight "[$url]($url)"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "azure-worker-pool"
    }
}