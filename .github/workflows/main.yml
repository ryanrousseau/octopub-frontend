name: Main workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package:
    name: Create and push packages ⚙️
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version-generator.outputs.version }}

    steps:
    - uses: actions/checkout@v2
    
    - name: Set Version Number
      id: version-generator
      run: echo "version=$(date +'%Y.%m.%d').$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

  create-release:
    name: Create release 🐙
    needs: [ package ] 
    runs-on: ubuntu-latest

    outputs:
      version: ${{ needs.package.outputs.version }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    steps:
      - name: Create a release in Octopus Deploy 🐙
        id: create-release
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'Octopub Frontend'
          release_number: ${{ needs.package.outputs.version }}

  deploy-to-development:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ create-release ] 
    name: "Deploy release ${{ needs.create-release.outputs.version }} to Development 🐙"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-development.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-development"
        name: "Deploy release ${{ needs.create-release.outputs.version }} to Development 🐙"
        with:
          project: "Octopub Frontend"
          release_number: ${{ needs.create-release.outputs.version }}
          environment: "Development"
          tenant_tags: "Release Ring/Alpha"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-development.outputs.server_tasks }}"

  wait-for-development:
    needs: [ create-release, deploy-to-development ]
    runs-on: ubuntu-latest
    name: "Wait for deployment of ${{ needs.create-release.outputs.version }} to Development to complete 🐙"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-development.outputs.server_tasks) }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-development"
        name: "Wait for deployment of ${{ needs.create-release.outputs.version }} to ${{ matrix.value.tenantName }} to complete 🐙"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}

  deploy-to-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ create-release, wait-for-development ] 
    name: "Deploy release ${{ needs.create-release.outputs.version }} to Test 🐙"
    outputs:
      server_tasks: ${{ steps.deploy-release-to-test.outputs.server_tasks }}

    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: OctopusDeploy/deploy-release-tenanted-action@v3
        id: "deploy-release-to-test"
        name: "Deploy release ${{ needs.create-release.outputs.version }} to Test 🐙"
        with:
          project: "Octopub Frontend"
          release_number: ${{ needs.create-release.outputs.version }}
          environment: "Test"
          tenant_tags: "Release Ring/Alpha"
      - id: "print-tasks"
        run: echo "${{ steps.deploy-release-to-test.outputs.server_tasks }}"

  wait-for-test:
    needs: [ create-release, deploy-to-test ]
    runs-on: ubuntu-latest
    name: "Wait for deployment of ${{ needs.create-release.outputs.version }} to Test to complete 🐙"
    strategy:
      matrix:
        value: ${{ fromJson(needs.deploy-to-test.outputs.server_tasks) }}
  
    env:
      OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  
    steps:
      - uses: OctopusDeploy/await-task-action@v3
        id: "wait-for-deploy-development"
        name: "Wait for deployment of ${{ needs.create-release.outputs.version }} to ${{ matrix.value.tenantName }} to complete 🐙"
        with:
          server_task_id: ${{ matrix.value.serverTaskId }}
